module mac_test(reg [15:0] acc_out_0;
  output [15:0] acc_out_1,
  output [15:0] acc_out_2,
  output [15:0] acc_out_3,
  output [15:0] acc_out_4,
  output [15:0] acc_out_5,
  output [15:0] acc_out_6,
  output [15:0] acc_out_7,
  output [15:0] acc_out_8,
  output [15:0] acc_out_9,
  output [15:0] acc_out_10,
  output [15:0] acc_out_11,
  output [15:0] acc_out_12,
  output [15:0] acc_out_13,
  output [15:0] acc_out_14,
  output [15:0] acc_out_15
);

  reg clk;
  reg [1023:0] A_in_0;
  reg [1023:0] A_in_1;
  reg [1023:0] A_in_2;
  reg [1023:0] A_in_3;
  reg [1023:0] A_in_4;
  reg [1023:0] A_in_5;
  reg [1023:0] A_in_6;
  reg [1023:0] A_in_7;
  reg [1023:0] A_in_8;
  reg [1023:0] A_in_9;
  reg [1023:0] A_in_10;
  reg [1023:0] A_in_11;
  reg [1023:0] A_in_11;
  reg [1023:0] A_in_12;
  reg [1023:0] A_in_13; 
  reg [1023:0] A_in_14;
  reg [1023:0] A_in_15; 

  reg [1023:0] B_in_1;
  reg [1023:0] B_in_2;
  reg [1023:0] B_in_3;
  reg [1023:0] B_in_4;
  reg [1023:0] B_in_5;
  reg [1023:0] B_in_6;
  reg [1023:0] B_in_7;
  reg [1023:0] B_in_8;
  reg [1023:0] B_in_9;
  reg [1023:0] B_in_10;
  reg [1023:0] B_in_11;
  reg [1023:0] B_in_12;
  reg [1023:0] B_in_13;
  reg [1023:0] B_in_14;
  reg [1023:0] B_in_15;
 
  reg [15:0] bias;
  reg [15:0] xor_result;
	reg [15:0] test

initial 
begin
	clk = 0;
	A_in_0 = ;   // 테스트 데이터 언제 줌?
	A_in_1 = ;
	A_in_2 = ;
	A_in_3 = ;
	A_in_4 = ;
	A_in_5 = ;
	A_in_6 = ;
	A_in_7 = ;
	A_in_8 = ;
	A_in_9 = ;
	A_in_10 = ;
	A_in_11 = ;
	A_in_12 = ;
	A_in_13 = ;
	A_in_14 = ;
	A_in_15 = ;
	
	B_in_0 = ; 				   // 테스트 데이터 언제 줌?
	B_in_1 = ;
	B_in_2 = ;
	B_in_3 = ;
	B_in_4 = ;	
	B_in_5 = ;
	B_in_6 = ;
	B_in_7 = ;
	B_in_8 = ;
	B_in_9 = ;
	B_in_10 = ;
	B_in_11 = ;
	B_in_12 = ;
	B_in_13 = ;
	B_in_14 = ;
	B_in_15 = ;
bias = ;
end

always 
begin
		#10 clk = ~clk; // 20ns의 클럭 주기
end

always@(podsege clk)
begin
	xor_result = test ^ acc_out;
	if (xor_result = 0)
	begin
	$display("Correct");
	end

  mac M1 (
    .clk(clk),
    .A_in(A_in_0),
    .B_in(B_in_0),
    .bias(bias_0),
		.acc_out(acc_out_0)
  );
   mac M1 (
    .clk(clk),
    .A_in(A_in_1),
    .B_in(B_in_1),
    .bias(bias),
		.acc_out(acc_out_1)
  );
   mac M1 (
    .clk(clk),
    .A_in(A_in_2),
    .B_in(B_in_2),
    .bias(bias),
		.acc_out(acc_out_2)
  );
   mac M1 (
    .clk(clk),
    .A_in(A_in_3),
    .B_in(B_in_3),
    .bias(bias),
		.acc_out(acc_out_3)
  );
   mac M1 (
    .clk(clk),
    .A_in(A_in_4),
    .B_in(B_in_4),
    .bias(bias),
		.acc_out(acc_out_4)
  );
   mac M1 (
    .clk(clk),
    .A_in(A_in_5),
    .B_in(B_in_5),
    .bias(bias),
		.acc_out(acc_out_5)
  );
   mac M1 (
    .clk(clk),
    .A_in(A_in_6),
    .B_in(B_in_6),
    .bias(bias),
		.acc_out(acc_out_6)
  );
   mac M1 (
    .clk(clk),
    .A_in(A_in_7),
    .B_in(B_in_7),
    .bias(bias),
		.acc_out(acc_out_7)
  );
   mac M1 (
    .clk(clk),
    .A_in(A_in_8),
    .B_in(B_in_8),
    .bias(bias),
		.acc_out(acc_out_8)
  );
   mac M1 (
    .clk(clk),
    .A_in(A_in_9),
    .B_in(B_in_9),
    .bias(bias),
		.acc_out(acc_out_9)
  );
   mac M1 (
    .clk(clk),
    .A_in(A_in_10),
    .B_in(B_in_10),
    .bias(bias),
		.acc_out(acc_out_10)
  );
   mac M1 (
    .clk(clk),
    .A_in(A_in_11),
    .B_in(B_in_11),
    .bias(bias),
		.acc_out(acc_out_11)
  );
   mac M1 (
    .clk(clk),
    .A_in(A_in_12),
    .B_in(B_in_12),
    .bias(bias),
		.acc_out(acc_out_12)
  );
   mac M1 (
    .clk(clk),
    .A_in(A_in_13),
    .B_in(B_in_13),
    .bias(bias),
		.acc_out(acc_out_13)
  );
   mac M1 (
    .clk(clk),
    .A_in(A_in_14),
    .B_in(B_in_14),
    .bias(bias),
		.acc_out(acc_out_14)
  );
   mac M1 (
    .clk(clk),
    .A_in(A_in_15),
    .B_in(B_in_15),
    .bias(bias),
		.acc_out(acc_out_15)
  );
end
  
endmodule
