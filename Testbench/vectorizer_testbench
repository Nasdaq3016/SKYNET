module vectorizer_tb;
  reg clka;
  reg ena;
  reg wea;
  reg [1:0] addra;
  reg [255:0] data_in;
  reg clkb;
  reg enb;
  reg [5:0] addrb;
  wire [15:0] data_out;
  
  integer i;
    
  vectorizer dut (
    .clka(clka), .ena(ena), .wea(wea), .addra(addra), .data_in(data_in),
    .clkb(clkb), .enb(enb), .addrb(addrb), .data_out(data_out)
  );
  always
    #5 clka = ~clka;
  always
    #5 clkb = ~clkb;
                
  initial begin    
    clka = 0; ena = 0; wea = 0;
    data_in = 256'b0101000100000001011111110000001111100010010110010111000001111011110011011001100100010001001000011110011011100110110100100111111010111101110001111001001001001110000100110100011100001001100100010011010011010110010010100011110111001100001100011000101011100101;
   
    clkb = 0; enb = 0;
    #20;
    
    ena = 1;
    wea = 1;
    
    for(i=1; i <= 4; i = i + 1)
        begin
           data_in = data_in + 1;
           addra = i-1;
    #10; 
        end
    ena = 0;
    wea = 0;
    enb = 1;
    
    for(i=1; i <= 64; i = i + 1)
        begin
            addrb = i-1;
    #10;
        end
    enb = 0;
  end
endmodule
