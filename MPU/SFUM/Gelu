module Gelu (
	input clk,
	input [15:0] data_0, input [15:0] data_1, input [15:0] data_2, input [15:0] data_3,
	input [15:0] data_4, input [15:0] data_5, input [15:0] data_6, input [15:0] data_7,
	input [15:0] data_8, input [15:0] data_9, input [15:0] data_10, input [15:0] data_11,
	input [15:0] data_12, input [15:0] data_13, input [15:0] data_14, input [15:0] data_15,
	output [15:0] Gelu_out_0, output [15:0] Gelu_out_1, output [15:0] Gelu_out_2, output [15:0] Gelu_out_3,
	output [15:0] Gelu_out_4, output [15:0] Gelu_out_5, output [15:0] Gelu_out_6, output [15:0] Gelu_out_7,
	output [15:0] Gelu_out_8, output [15:0] Gelu_out_9, output [15:0] Gelu_out_10, output [15:0] Gelu_out_11,
	output [15:0] Gelu_out_12, output [15:0] Gelu_out_13, output [15:0] Gelu_out_14, output [15:0] Gelu_out_15
	);
	reg [15:0] array [15:0];
	reg [15:0] LUT_output [15:0];
	reg enable_inst;
always @(posedge clk or posedge reset) begin
    if (reset) begin
      enable_inst <= 1'b0;  // 리셋 시 인스턴스 동작 비활성화
    end else begin
      // 입력 데이터가 변할 때마다 데이터 할당 및 인스턴스 동작 활성화
      enable_inst <= 1'b1;
      array[0] = data[0];
      array[1] = data[1];
      array[2] = data[2];
      array[3] = data[3];
      array[4] = data[4];
      array[5] = data[5];
      array[6] = data[6];
      array[7] = data[7];
      array[8] = data[8];
      array[9] = data[9];
									  		array[10] = data[10];
      array[11] = data[11];
      array[12] = data[12];
      array[13] = data[13];
      array[14] = data[14];
      array[15] = data[15];
    end
  end
		
	Gelu_LUT lut_inst (.input_GElU(array[0]), .output_GELU(LUT_output[0]), .enable(enable_inst));
	Gelu_LUT lut_inst (.input_GElU(array[1]), .output_GELU(LUT_output[1]), .enable(enable_inst));
	Gelu_LUT lut_inst (.input_GElU(array[2]), .output_GELU(LUT_output[2]), .enable(enable_inst));
	Gelu_LUT lut_inst (.input_GElU(array[3]), .output_GELU(LUT_output[3]), .enable(enable_inst));
	Gelu_LUT lut_inst (.input_GElU(array[4]), .output_GELU(LUT_output[4]), .enable(enable_inst));
	Gelu_LUT lut_inst (.input_GElU(array[5]), .output_GELU(LUT_output[5]), .enable(enable_inst));
	Gelu_LUT lut_inst (.input_GElU(array[6]), .output_GELU(LUT_output[6]), .enable(enable_inst));
	Gelu_LUT lut_inst (.input_GElU(array[7]), .output_GELU(LUT_output[7]), .enable(enable_inst));
	Gelu_LUT lut_inst (.input_GElU(array[8]), .output_GELU(LUT_output[8]), .enable(enable_inst));
	Gelu_LUT lut_inst (.input_GElU(array[9]), .output_GELU(LUT_output[9]), .enable(enable_inst));
	Gelu_LUT lut_inst (.input_GElU(array[10]), .output_GELU(LUT_output[10]), .enable(enable_inst));
	Gelu_LUT lut_inst (.input_GElU(array[11]), .output_GELU(LUT_output[11]), .enable(enable_inst));
	Gelu_LUT lut_inst (.input_GElU(array[12]), .output_GELU(LUT_output[12]), .enable(enable_inst));
	Gelu_LUT lut_inst (.input_GElU(array[13]), .output_GELU(LUT_output[13]), .enable(enable_inst));
	Gelu_LUT lut_inst (.input_GElU(array[14]), .output_GELU(LUT_output[14]), .enable(enable_inst));
	Gelu_LUT lut_inst (.input_GElU(array[15]), .output_GELU(LUT_output[15]), .enable(enable_inst));
	

	assign Gelu_out_0 = LUT_output[0];
	assign Gelu_out_1 = LUT_output[1];
	assign Gelu_out_2 = LUT_output[2];
	assign Gelu_out_3 = LUT_output[3];
	assign Gelu_out_4 = LUT_output[4];
	assign Gelu_out_5 = LUT_output[5];
	assign Gelu_out_6 = LUT_output[6];
	assign Gelu_out_7 = LUT_output[7];
	assign Gelu_out_8 = LUT_output[8];
	assign Gelu_out_9 = LUT_output[9];
	assign Gelu_out_10 = LUT_output[10];
	assign Gelu_out_11 = LUT_output[11];
	assign Gelu_out_12 = LUT_output[12];
	assign Gelu_out_13 = LUT_output[13];
	assign Gelu_out_14 = LUT_output[14];
	assign Gelu_out_15 = LUT_output[15];
endmodule
