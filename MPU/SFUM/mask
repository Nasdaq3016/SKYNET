module Mask (
  input clk,
  input [15:0] data_0, input [15:0] data_1, input [15:0] data_2, input [15:0] data_3,
  input [15:0] data_4, input [15:0] data_5, input [15:0] data_6, input [15:0] data_7,
  input [15:0] data_8, input [15:0] data_9, input [15:0] data_10, input [15:0] data_11,
  input [15:0] data_12, input [15:0] data_13, input [15:0] data_14, input [15:0] data_15,
  output [15:0] Mask_0, output [15:0] Mask_1, output [15:0] Mask_2, output [15:0] Mask_3,
  output [15:0] Mask_4, output [15:0] Mask_5, output [15:0] Mask_6, output [15:0] Mask_7,
  output [15:0] Mask_8, output [15:0] Mask_9, output [15:0] Mask_10, output [15:0] Mask_11,
  output [15:0] Mask_12, output [15:0] Mask_13, output [15:0] Mask_14, output [15:0] Mask_15
   );
  reg [15:0] array_0 [15:0];
  reg [15:0] array_1 [15:0];
  reg [15:0] array_2 [15:0];
  reg [15:0] array_3 [15:0];
  reg [15:0] array_4 [15:0];
  reg [15:0] array_5 [15:0];
  reg [15:0] array_6 [15:0];
  reg [15:0] array_7 [15:0];
  reg [15:0] array_8 [15:0];
  reg [15:0] array_9 [15:0];
  reg [15:0] array_10 [15:0];
  reg [15:0] array_11 [15:0];
  reg [15:0] array_12 [15:0];
  reg [15:0] array_13 [15:0];
  reg [15:0] array_14 [15:0];
  reg [15:0] array_15 [15:0];
  integer i;
 
  always @ (*) begin
    data_0 <= data_in[255:240];
    data_1 <= data_in[239:224];
    data_2 <= data_in[223:208];
    data_3 <= data_in[207:192];
    data_4 <= data_in[175:160];
    data_5 <= data_in[159:144];
    data_6 <= data_in[143:128];
    data_7 <= data_in[95:80];
    data_8 <= data_in[79:64];
    data_9 <= data_in[15:0];
  end

  assign data_out = {data_0, data_1, data_2, data_3, 16'b1111100000000000, data_4, data_5, data_6, 16'b1111100000000000,
                     16'b1111100000000000, data_7, data_8, 16'b1111100000000000, 16'b1111100000000000, 16'b1111100000000000, data_9}; //16'b1111100000000000 : the smallest number expressed by FP16 
endmodule


