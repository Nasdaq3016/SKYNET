module Mask (
  input clk,
  input [15:0] data_0, input [15:0] data_1, input [15:0] data_2, input [15:0] data_3,
  input [15:0] data_4, input [15:0] data_5, input [15:0] data_6, input [15:0] data_7,
  input [15:0] data_8, input [15:0] data_9, input [15:0] data_10, input [15:0] data_11,
  input [15:0] data_12, input [15:0] data_13, input [15:0] data_14, input [15:0] data_15,
  output [15:0] Mask_0_0, output [15:0] Mask_0_1, output [15:0] Mask_0_2, output [15:0] Mask_0_3,
  output [15:0] Mask_1_0, output [15:0] Mask_1_1, output [15:0] Mask_1_2, output [15:0] Mask_1_3,
  output [15:0] Mask_2_0, output [15:0] Mask_2_1, output [15:0] Mask_2_2, output [15:0] Mask_2_3,
  output [15:0] Mask_3_0, output [15:0] Mask_3_1, output [15:0] Mask_3_2, output [15:0] Mask_3_3,
   );
  reg [15:0] array_0 [3:0];
  reg [15:0] array_1 [3:0];
  reg [15:0] array_2 [3:0];
  reg [15:0] array_3 [3:0];
  
  integer i;
 
  always @ (*) begin
    array_0[0] = data_0; array_0[1] = data_1; array_0[2] = data_2; array_0[3] = data_3;
    array_1[0] = data_4; array_1[1] = data_5; array_1[2] = data_6; array_1[3] = data_7;
    array_2[0] = data_8; array_2[1] = data_9; array_2[2] = data_10; array_2[3] = data_11;
    array_3[0] = data_12; array_3[1] = data_13; array_3[2] = data_14; array_3[3] = data_15;
    
    for (i = 1; i < 4; i = i + 1)
    begin 
        array_0[i] = 16'b111110000000000;
    end
    for (i = 2; i < 4; i = i + 1)
    begin 
        array_1[i] = 16'b111110000000000;
    end
    for (i = 3; i < 4; i = i + 1)
    begin 
        array_2[i] = 16'b111110000000000;
    end

  end
  assign Mask_0_0 = array_0[0];
  assign Mask_0_1 = array_0[1];
  assign Mask_0_2 = array_0[2];
  assign Mask_0_3 = array_0[3];
  assign Mask_1_0 = array_1[0];
  assign Mask_1_1 = array_1[1];
  assign Mask_1_2 = array_1[2];
  assign Mask_1_3 = array_1[3];
  assign Mask_2_0 = array_2[0];
  assign Mask_2_1 = array_2[1];
  assign Mask_2_2 = array_2[2];
  assign Mask_2_3 = array_2[3];
  assign Mask_3_0 = array_3[0];
  assign Mask_3_1 = array_3[1];
  assign Mask_3_2 = array_3[2];
  assign Mask_3_3 = array_3[3];

endmodule


