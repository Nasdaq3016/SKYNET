module Mask (
  input clk,
  input [15:0] data_0, input [15:0] data_1, input [15:0] data_2, input [15:0] data_3,
  input [15:0] data_4, input [15:0] data_5, input [15:0] data_6, input [15:0] data_7,
  input [15:0] data_8, input [15:0] data_9, input [15:0] data_10, input [15:0] data_11,
  input [15:0] data_12, input [15:0] data_13, input [15:0] data_14, input [15:0] data_15,
  output [15:0] Mask_0_0, output [15:0] Mask_0_1, output [15:0] Mask_0_2, output [15:0] Mask_0_3,
  output [15:0] Mask_1_0, output [15:0] Mask_1_1, output [15:0] Mask_1_2, output [15:0] Mask_1_3,
  output [15:0] Mask_2_0, output [15:0] Mask_2_1, output [15:0] Mask_2_2, output [15:0] Mask_2_3,
  output [15:0] Mask_3_0, output [15:0] Mask_3_1, output [15:0] Mask_3_2, output [15:0] Mask_3_3,
   );
  reg [15:0] array_0 [3:0];
  reg [15:0] array_1 [3:0];
  reg [15:0] array_2 [3:0];
  reg [15:0] array_3 [3:0];
  
  integer i;
 
  always @ (*) begin
    array_0 [0] = data_0; array_1 [0] = data_0; array_2 [0] = data_0; array_3 [0] = data_0;
    array_4 [0] = data_0; array_5 [0] = data_0; array_6 [0] = data_0; array_7 [0] = data_0;
    array_8 [0] = data_0; array_9 [0] = data_0; array_10 [0] = data_0; array_11 [0] = data_0;
    array_12 [0] = data_0; array_13 [0] = data_0; array_14 [0] = data_0; array_15 [0] = data_0;
//
    
    for (i = 1; i < 16; i = i + 1)
    begin 
        array_0[i] = 16'b111110000000000;
    end
    for (i = 2; i < 16; i = i + 1)
    begin 
        array_1[i] = 16'b111110000000000;
    end
    for (i = 3; i < 16; i = i + 1)
    begin 
        array_2[i] = 16'b111110000000000;
    end
    for (i = 4; i < 16; i = i + 1)
    begin 
        array_3[i] = 16'b111110000000000;
    end
    for (i = 5; i < 16; i = i + 1)
    begin 
        array_4[i] = 16'b111110000000000;
    end
    for (i = 6; i < 16; i = i + 1)
    begin 
        array_5[i] = 16'b111110000000000;
    end
    for (i = 7; i < 16; i = i + 1)
    begin 
        array_6[i] = 16'b111110000000000;
    end
    for (i = 8; i < 16; i = i + 1)
    begin 
        array_7[i] = 16'b111110000000000;
    end
    for (i = 9; i < 16; i = i + 1)
    begin 
        array_8[i] = 16'b111110000000000;
    end
    for (i = 10; i < 16; i = i + 1)
    begin 
        array_9[i] = 16'b111110000000000;
    end
    for (i = 11; i < 16; i = i + 1)
    begin 
        array_10[i] = 16'b111110000000000;
    end
    for (i = 12; i < 16; i = i + 1)
    begin 
        array_1[i] = 16'b111110000000000;
    end
    for (i = 13; i < 16; i = i + 1)
    begin 
        array_12[i] = 16'b111110000000000;
    end
    for (i = 14; i < 16; i = i + 1)
    begin 
        array_13[i] = 16'b111110000000000;
    end
    for (i = 15; i < 16; i = i + 1)
    begin 
        array_14[i] = 16'b111110000000000;
    end

  end

  assign data_out = {data_0, data_1, data_2, data_3, 16'b1111100000000000, data_4, data_5, data_6, 16'b1111100000000000,
                     16'b1111100000000000, data_7, data_8, 16'b1111100000000000, 16'b1111100000000000, 16'b1111100000000000, data_9}; //16'b1111100000000000 : the smallest number expressed by FP16 
endmodule


